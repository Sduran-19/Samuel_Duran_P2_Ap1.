@page "/editarvehiculo/{VehiculoID:int}"
@using Samuel_Duran_P2_Ap1.Models

@inject HttpClient httpClient
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

<EditForm Model="vehiculo" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />

    <div class="card-header">
        <h3><strong>Editar Vehículo</strong></h3>
    </div>

    <div class="card-body">
        <div class="modal-body">
            <div class="card-header">
                <h3><strong>Editar Detalle</strong></h3>
            </div>
            <div class="row">
                <div class="col">
                    <div>
                        <label class="fw-bold">Valor:</label>
                        <InputNumber class="form-control mb-2" @bind-Value="detalle.Valor" placeholder="Ingrese el valor"></InputNumber>
                    </div>
                    <div class="text-end mb-2">
                        <button type="button" class="btn btn-success" @onclick="agregarDetalle"><i class="fas fa-plus"></i> Agregar</button>
                    </div>
                </div>

                <div class="col-5">
                    <div class="mb-4"></div>
                    <table class="table table-bordered text-center">
                        <thead class="bg-secondary text-white">
                            <tr>
                                <th class="col-6">Valor</th>
                                <th class="col-6">Eliminar</th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (ListaDetalles.Any())
                            {
                                @foreach (var item in ListaDetalles)
                                {
                                    <tr>
                                        <td class="col-6"><InputNumber @bind-Value="item.Valor" class="form-control"></InputNumber></td>
                                        <td class="col-6"><button type="button" @onclick="(() => eliminarDetalle(item))">Eliminar</button></td>
                                    </tr>
                                }
                            }
                            else
                            {
                                <tr><td colspan="2">No hay detalles...</td></tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>

    <div class="card-footer bg-light d-flex justify-content-end">
        <div class="btn-group">
            <a type="button" href="/indexvehiculos/" class="btn btn-outline-danger"><span class="fas fa-arrow-left"></span> Volver </a>
            <button type="submit" class="btn btn-outline-success"><span class="fas fa-save"></span> Guardar </button>
        </div>
    </div>

    @mensajeTexto
</EditForm>

@code {

    public Vehiculo vehiculo = new Vehiculo();
    public VehiculoDetalle detalle = new VehiculoDetalle();
    public List<VehiculoDetalle> ListaDetalles = new List<VehiculoDetalle>();
    public List<VehiculoDetalle> ListaDetallesEliminados = new List<VehiculoDetalle>();

    [Parameter]
    public int VehiculoID { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (VehiculoID > 0)
        {
            await Buscar();
        }
    }

    public async Task Buscar()
    {
        var vehiculoEncontrado = await httpClient.GetFromJsonAsync<Vehiculo>("api/Vehiculos/" + VehiculoID);
        if (vehiculoEncontrado != null)
        {
            this.vehiculo = vehiculoEncontrado;
            ListaDetalles = (await httpClient.GetFromJsonAsync<List<VehiculoDetalle>>("api/VehiculoDetalles"))!.Where(d => d.VehiculoId == VehiculoID).ToList();
        }
        else
        {
            await MostrarMensaje("Vehículo no encontrado", false);
        }
    }

    public async Task Guardar()
    {
        var guardadoVehiculo = await httpClient.PutAsJsonAsync("api/Vehiculos", this.vehiculo);

        if (guardadoVehiculo.IsSuccessStatusCode)
        {
            if (ListaDetallesEliminados.Any())
            {
                foreach (var detalle in ListaDetallesEliminados)
                {
                    await httpClient.DeleteAsync("api/VehiculoDetalles/" + detalle.Id);
                }
            }

            foreach (var detalle in ListaDetalles)
            {
                if (detalle.Id == 0)
                {
                    VehiculoDetalle vehiculoDetalleNew = new VehiculoDetalle();
                    vehiculoDetalleNew.VehiculoId = VehiculoID;
                    vehiculoDetalleNew.Valor = detalle.Valor;

                    await httpClient.PostAsJsonAsync("api/VehiculoDetalles", vehiculoDetalleNew);
                }
            }

            await MostrarMensaje("Operación completada", true);
            NavigationManager.NavigateTo("/indexvehiculos");
        }
        else
        {
            await MostrarMensaje("Error en la operación", false);
        }
    }

    public async Task agregarDetalle()
    {
        if (detalle.Valor != null)
        {
            ListaDetalles.Add(new VehiculoDetalle() { Valor = detalle.Valor.Value });
            detalle.Valor = null;
        }
        else
        {
            await MostrarMensaje("El valor es requerido", false);
        }
    }

    public async Task eliminarDetalle(VehiculoDetalle detalle)
    {
        if (detalle.Id != 0)
        {
            ListaDetallesEliminados.Add(detalle);
        }
        ListaDetalles.Remove(detalle);
    }

    string mensajeTexto = "";
    bool ModalMensaje = false;

    public async Task MostrarMensaje(string mensaje, bool exito)
    {
        mensajeTexto = mensaje;

        if (exito)
        {
            mensajeTexto = "Operación exitosa";
        }
        else
        {
            mensajeTexto = "Error";
        }
        ModalMensaje = true;
        StateHasChanged();
        await Task.Delay(3000);
        ModalMensaje = false;
        StateHasChanged();
    }
}
