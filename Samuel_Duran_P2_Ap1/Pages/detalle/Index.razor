@page "/indexvehiculo"
@using Samuel_Duran_P2_Ap1.Models

@inject HttpClient httpClient
@inject IJSRuntime JSRuntime

<EditForm Model="ListaVehiculos" class="border shadow-lg p-3 rounded">
    <div class="card-header">
        <h3><strong> Vehículos</strong></h3>
    </div>

    <div class="card-body">
        <div class="row mb-3 align-items-end">
            <div class="col-md-3">
                <label for="Filtro" class="form-label">Filtrar por:</label>
                <select @bind="filtro" class="form-select">
                    <option value="VehiculoId">Vehículo ID</option>
                    <option value="Fecha">Fecha</option>
                </select>
            </div>
            <div class="col-md-6">
                <label for="ValorFiltro" class="form-label">Búsqueda:</label>
                <div class="input-group">
                    <input @bind="valorFiltro" class="form-control" placeholder="Buscar" />
                    <button @onclick="Buscar" class="btn btn-outline-primary" type="button">
                        <span class="fas fa-search"></span> Buscar
                    </button>
                </div>
            </div>
            <div class="col-md-3 text-end">
                <a href="/createvehiculo" class="btn btn-outline-success" type="button"><span class="bi bi-floppy-fill"></span> Crear </a>
            </div>
        </div>
    </div>
    <table class="table table-bordered">
        <thead>
            <tr>
                <th>Vehículo ID</th>
                <th>Fecha</th>
                <th>Descripción</th>
                <th>Costos</th>
                <th>Gastos</th>
                <th>Editar</th>
                <th>Detalle</th>
                <th>Eliminar</th>
            </tr>
        </thead>
        <tbody>
            @if (ListaVehiculos.Any())
            {
                @foreach (var vehiculo in ListaVehiculos)
                {
                    <tr>
                        <td>@vehiculo.VehiculoId</td>
                        <td>@vehiculo.Fecha.ToShortDateString()</td>
                        <td>@vehiculo.Descripcion</td>
                        <td>@vehiculo.Costos</td>
                        <td>@vehiculo.Gastos</td>
                        <td>
                            <a href="/editarvehiculo/@vehiculo.VehiculoId" class="btn-editar">
                                Editar
                            </a>
                        </td>
                        <td>
                            <a href="/detailsvehiculo/@vehiculo.VehiculoId" class="btn-detalle">
                                Ver
                            </a>
                        </td>
                       
                    </tr>
                }
            }
        </tbody>
    </table>
    @mensajeTexto
</EditForm>

@code {
    private string filtro = "VehiculoId";
    private string valorFiltro = "";

    public List<Vehiculo> ListaVehiculos { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await CargarVehiculos();
    }

    private async Task CargarVehiculos()
    {
        ListaVehiculos = await httpClient.GetFromJsonAsync<List<Vehiculo>>("api/Vehiculos");
    }

    private async Task Buscar()
    {
        if (valorFiltro.Trim() != "")
        {
            if (filtro == "VehiculoId" && int.TryParse(valorFiltro, out int vehiculoId))
            {
                ListaVehiculos = (await httpClient.GetFromJsonAsync<List<Vehiculo>>("api/Vehiculos"))!.Where(v => v.VehiculoId == vehiculoId).ToList();
            }
            else if (filtro == "Fecha")
            {
                ListaVehiculos = (await httpClient.GetFromJsonAsync<List<Vehiculo>>("api/Vehiculos"))!.Where(v => v.Fecha.ToShortDateString() == valorFiltro).ToList();
            }

            if (ListaVehiculos == null || ListaVehiculos.Count == 0)
            {
                await MostrarMensaje("Vehículo no encontrado", false);
            }
        }
        else
        {
            ListaVehiculos = await httpClient.GetFromJsonAsync<List<Vehiculo>>("api/Vehiculos");
        }
    }

    string mensajeTexto = "";

    public async Task MostrarMensaje(string mensaje, bool exito)
    {
        mensajeTexto = mensaje;

        if (exito)
        {
            mensajeTexto = "Encontrado con éxito";
        }
        else
        {
            mensajeTexto = "Error, no existe";
        }

        StateHasChanged();
        await Task.Delay(3000);
        mensajeTexto = "";
        StateHasChanged();
    }

    
}
