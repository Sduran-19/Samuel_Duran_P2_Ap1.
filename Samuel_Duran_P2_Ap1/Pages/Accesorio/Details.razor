@page "/detailsAccesorio"
@page "/detailsAccesorio/{AccesorioID:int}"

@inject NavigationManager NavigationManager
@inject HttpClient HttpClient

<EditForm Model="accesorio">
	<DataAnnotationsValidator />

	<div class="card-header">
		<h3><strong> Vista de Registro Accesorios</strong></h3>
	</div>
	<div class="card">
		
		<div class="card-body">
			<div class="row">
				<div class="col">
					<label class="fw-bold">Descripci&oacute;n:</label>
					<span>@accesorio.Descripcion</span>
				</div>
			</div>
		</div>
		<div class="card-footer bg-light d-flex justify-content-end">
			<div class="btn-group">
				<a href="/indexAccesorios" class="btn btn-outline-danger"><span class="fas fa-arrow-left"></span> Volver </a>

			</div>
			
		</div>
	</div>

	@mensajeTexto

</EditForm>





@code {

	[Parameter]
	public int AccesorioID { get; set; }

	public Accesorios accesorio = new Accesorios();

	protected override async Task OnInitializedAsync()
	{
		if (AccesorioID != 0)
		{
			var buscado = await HttpClient.GetFromJsonAsync<Accesorios>("api/Accesorios/" + AccesorioID);
			if (buscado != null)
			{
				accesorio = buscado;
			}
			else
			{
				await MostrarMensaje("Accesorio no encontrado...", false);
			}
		}
	}


	string mensajeTexto = "";
	bool ModalMensaje = false;

	public async Task MostrarMensaje(string mensaje, bool exito)
	{
		mensajeTexto = mensaje;

		if (exito)
		{
			mensajeTexto = "Guardado con éxito";
		}
		else
		{
			mensajeTexto = "Error al guardar";
		}

		ModalMensaje = true;
		StateHasChanged();
		await Task.Delay(3000);
		ModalMensaje = false;
		StateHasChanged();
	}

}
